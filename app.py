# app.py
import streamlit as st
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
import io
import zipfile
import os

KEY = b'thermalopenssl.h'
IV = b'thermalopenssl.h'

def decrypt_data(ciphertext: bytes) -> bytes:
    try:
        cipher = Cipher(algorithms.AES(KEY), modes.CBC(IV), backend=default_backend())
        decryptor = cipher.decryptor()
        padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()
        
        unpadder = padding.PKCS7(128).unpadder()
        plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()
        return plaintext
    except ValueError:
        return None

def encrypt_data(plaintext: bytes) -> bytes:
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(plaintext) + padder.finalize()
    
    cipher = Cipher(algorithms.AES(KEY), modes.CBC(IV), backend=default_backend())
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()
    return ciphertext

def create_magisk_module_zip(encrypted_conf_data: bytes, original_conf_filename: str) -> bytes:
    zip_buffer = io.BytesIO()
    module_id = "MiThermal Interactive"
    module_name = "MiThermal Interactive"
    module_version = "1.002"
    module_version_code = "1"
    module_author = "jaywehosl"
    module_description = f"Custom thermal configuration ({original_conf_filename}) generated by iteractive MiThermal editor"
    
    conf_path_in_zip = f"system/vendor/etc/{original_conf_filename}"

    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zip_file:
        module_prop_content = (
            f"id={module_id}\n"
            f"name={module_name}\n"
            f"version={module_version}\n"
            f"versionCode={module_version_code}\n"
            f"author={module_author}\n"
            f"description={module_description}\n"
            "minMagisk=1900\n"
        ).encode('utf-8')
        zip_file.writestr("module.prop", module_prop_content)

    
        meta_inf_base = "META-INF/com/google/android/"
        
        
        update_binary_content = (
            "#!/sbin/sh\n"
            "# This script is a placeholder.\n"
            "# Magisk's systemless approach will handle placing files from the 'system' directory.\n"
            "ui_print \"***********************************\"\n"
            f"ui_print \"- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {module_name} -\"\n"
            f"ui_print \"-       {module_author}      -\"\n"
            "ui_print \"***********************************\"\n"
            "# No real operations needed by this script if just using system overlay.\n"
            "exit 0\n"
        ).encode('utf-8')
        
        update_binary_info = zipfile.ZipInfo(meta_inf_base + "update-binary")
        update_binary_info.external_attr = 0o100755 << 16  # rwxr-xr-x
        update_binary_info.compress_type = zipfile.ZIP_DEFLATED
        zip_file.writestr(update_binary_info, update_binary_content)

        
        updater_script_content = (
            "# This is a placeholder updater-script.\n"
            "# For simple modules that only replace/add files in /system,\n"
            "# Magisk's standard installation process handles it.\n"
        ).encode('utf-8')
        zip_file.writestr(meta_inf_base + "updater-script", updater_script_content)

        
        zip_file.writestr(conf_path_in_zip, encrypted_conf_data)

  

    return zip_buffer.getvalue()


st.set_page_config(page_title="MiThermal Editor", layout="centered")

st.title("MiThermal Interactive Editor")
st.markdown("–í–Ω–∏–º–∞–Ω–∏–µ! –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä target-trig (—á–∞—Å—Ç–æ—Ç–∞-—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞) –≤—ã –¥–µ–ª–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫.")


if 'decrypted_text' not in st.session_state:
    st.session_state.decrypted_text = ""
if 'original_filename' not in st.session_state:
    st.session_state.original_filename = "encrypted.conf"

st.subheader("")
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ .conf —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", type=['conf'], label_visibility="collapsed")

if uploaded_file is not None:
    st.session_state.original_filename = uploaded_file.name
    
    if st.button("–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", key="decrypt_button"):
        ciphertext = uploaded_file.getvalue()
        plaintext_bytes = decrypt_data(ciphertext)
        
        if plaintext_bytes:
            try:
                # Try decoding with utf-8 first, then latin-1 as a fallback
                st.session_state.decrypted_text = plaintext_bytes.decode('utf-8')
            except UnicodeDecodeError:
                st.session_state.decrypted_text = plaintext_bytes.decode('latin-1') # Fallback
            st.success("–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –Ω–∏–∂–µ.")
        else:
            st.error("–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏! –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π –∫–ª—é—á, –∏–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π .conf —Ñ–∞–π–ª.")
            st.session_state.decrypted_text = ""

# --- Step 2: Edit Text Area ---
if st.session_state.decrypted_text:
    st.subheader("2. –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
    st.caption("–ó–Ω–∞—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü [XXXX-SS-CPU] = target (—á–∞—Å—Ç–æ—Ç–∞) –∑–∞–¥–∞—ë—Ç—Å—è –≤ –ì–µ—Ä—Ü–∞—Ö (2.5–ì–ì—Ü=2500000–ì—Ü), –∑–Ω–∞—á–µ–Ω–∏–µ trig (–ø–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã) –∑–∞–¥–∞—ë—Ç—Å—è –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è, —É–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ 1000 (48000=48–°*1000).")
    
    edited_text = st.text_area(
        "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:",
        value=st.session_state.decrypted_text,
        height=400,
        key="editor",
        label_visibility="collapsed"
    )
    
    st.markdown("---")
    st.subheader("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    # --- Step 3: Encrypt and Download Options ---
    if edited_text: # Only show download if there's text to encrypt
        try:
            # Encode the edited text back to bytes (use the same encoding used for decoding, or a safe one)
            final_plaintext_bytes = edited_text.encode('latin-1') # Using latin-1 for safety with potentially mixed content
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º: {e}")
            final_plaintext_bytes = None

        if final_plaintext_bytes:
            final_ciphertext = encrypt_data(final_plaintext_bytes)
            
            col1, col2 = st.columns(2)

            with col1:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å .conf —Ñ–∞–π–ª",
                    data=final_ciphertext,
                    file_name=f"edited_{st.session_state.original_filename}",
                    mime="application/octet-stream",
                    help="–°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π .conf —Ñ–∞–π–ª."
                )
            
            with col2:
                # Create Magisk Module ZIP
                try:
                    magisk_module_zip_data = create_magisk_module_zip(final_ciphertext, st.session_state.original_filename)
                    magisk_zip_filename = f"Magisk_MiThermal_{st.session_state.original_filename.replace('.conf', '')}.zip"
                    
                    st.download_button(
                        label="üì¶ –°–∫–∞—á–∞—Ç—å Magisk –º–æ–¥—É–ª—å (.zip)",
                        data=magisk_module_zip_data,
                        file_name=magisk_zip_filename,
                        mime="application/zip",
                        help="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª, —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –≤ ZIP-–∞—Ä—Ö–∏–≤ Magisk –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏."
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Magisk –º–æ–¥—É–ª—è: {e}")

# --- Footer or additional info ---
st.markdown("---")
st.caption("MiThermal Editor v0.2 | –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.")
